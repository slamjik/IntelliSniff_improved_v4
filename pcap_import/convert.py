import os
import glob
import pandas as pd
from tqdm import tqdm
from scipy.io import arff

def safe_convert_arff(file_path):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .arff ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    try:
        data, meta = arff.loadarff(file_path)
        df = pd.DataFrame(data)
        for col in df.columns:
            if df[col].dtype == object:
                df[col] = df[col].apply(lambda x: x.decode("utf-8") if isinstance(x, bytes) else x)
        return df
    except Exception as e:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ scipy –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è
        print(f"‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è: {os.path.basename(file_path)} ({e})")
        try:
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                lines = [l for l in f.readlines() if not l.strip().startswith("@")]
            data = [l.strip().split(",") for l in lines if l.strip()]
            df = pd.DataFrame(data)
            return df
        except Exception as e2:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {os.path.basename(file_path)} ({e2})")
            return None


def convert_arff_to_csv(base_dir=None):
    if base_dir is None:
        base_dir = os.path.join(os.path.dirname(__file__), "..", "datasets", "ISCXVPN")
        base_dir = os.path.abspath(base_dir)

    os.makedirs(base_dir, exist_ok=True)
    arff_files = glob.glob(os.path.join(base_dir, "*.arff"))

    if not arff_files:
        print(f"‚ùå –í –ø–∞–ø–∫–µ {base_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ .arff")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(arff_files)} ARFF-—Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...\n")

    for f in tqdm(arff_files, desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", ncols=80):
        df = safe_convert_arff(f)
        if df is None:
            continue
        csv_path = os.path.splitext(f)[0] + ".csv"
        try:
            df.to_csv(csv_path, index=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {os.path.basename(f)}: {e}")

    print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {base_dir}")


if __name__ == "__main__":
    convert_arff_to_csv()
