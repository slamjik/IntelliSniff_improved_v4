import os
import time
import joblib
import numpy as np
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(__file__)
DATA_DIR = os.path.join(BASE_DIR, "data")
MODEL_PATH = os.path.join(DATA_DIR, "model.joblib")
DATASET_PATH = os.path.join(BASE_DIR, "..", "datasets", "merged_detailed.parquet")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
print(f"üì¶ Loading model from: {MODEL_PATH}")
bundle = joblib.load(MODEL_PATH)
model = bundle["model"]
features = bundle["features"]

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ ===
print(f"üìÇ Loading dataset: {DATASET_PATH}")
df = pd.read_parquet(DATASET_PATH)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –º–µ—Ç–∫—É
if "label_multi" in df.columns:
    y = df["label_multi"]
elif "label_binary" in df.columns:
    y = df["label_binary"]
elif "label" in df.columns:
    y = df["label"]
else:
    raise ValueError("‚ùå No label column found in dataset")

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
X = df[features].copy()
X = X.select_dtypes(include=[np.number]).fillna(0).astype(np.float32)

# –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if not np.issubdtype(y.dtype, np.number):
    y = LabelEncoder().fit_transform(y)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ===
print("üîç Running predictions...")
start = time.time()
y_pred = model.predict(X)
end = time.time()
print(f"‚ö° Inference time: {end - start:.2f}s for {len(X):,} samples")

# === –û—Ç—á—ë—Ç ===
print("\nüìä [MODEL EVALUATION REPORT]")
print(classification_report(y, y_pred, zero_division=0))
print(f"‚úÖ Accuracy: {accuracy_score(y, y_pred):.4f}")

# === –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ ===
cm = confusion_matrix(y, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=False, cmap="Blues")
plt.title("Confusion Matrix ‚Äî IntelliSniff Model (Test Evaluation)")
plt.xlabel("Predicted")
plt.ylabel("Actual")

out_path = os.path.join(DATA_DIR, "confusion_matrix_test.png")
plt.savefig(out_path, dpi=200)
plt.close()
print(f"üñºÔ∏è Confusion matrix saved to {out_path}")
